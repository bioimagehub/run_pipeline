import numpy as np
import dask
import dask.array as da
from skimage.registration import phase_cross_correlation
from scipy.ndimage import shift
from bioio import BioImage
from bioio.writers import OmeTiffWriter
from tqdm import tqdm
import argparse
import os
from dask import delayed


def get_frame_shift(reference_frame, target_frame, upsample_factor=10, space='real', disambiguate=False, overlap_ratio=0.8):
    """
    Must be 3D frames (Z, Y, X).
    Register the target frame to the reference frame using phase cross-correlation.
    Returns the shift in Z, Y, X coordinates.
    """
    # Ensure that reference_frame and target_frame are 3D arrays not dask arrays
    if isinstance(reference_frame, da.Array):
        reference_frame = reference_frame.compute()
    if isinstance(target_frame, da.Array):
        target_frame = target_frame.compute()

    shift, error, diffphase = phase_cross_correlation(
        reference_frame, 
        target_frame, 
        upsample_factor=upsample_factor, 
        space=space, 
        disambiguate=disambiguate, 
        overlap_ratio=overlap_ratio
    )
    return shift


from dask import delayed, compute
from dask.diagnostics import ProgressBar
import multiprocessing
def get_frame_shifts(image, upsample_factor=10, space='real', disambiguate=False, overlap_ratio=0.8):
    """
    Fast parallel computation of cumulative shifts for a 4D image stack (T, Z, Y, X).
    Returns a NumPy array of shape (T, 3).
    """

    frames = image.shape[0]
    
    # First shift is zero
    shifts = [delayed(lambda: np.zeros(3, dtype=np.float32))()]

    for f in range(1, frames):
        ref_frame = image[f - 1]
        target_frame = image[f]

        shifts.append(
            delayed(get_frame_shift)(
                ref_frame, target_frame,
                upsample_factor=upsample_factor,
                space=space,
                disambiguate=disambiguate,
                overlap_ratio=overlap_ratio
            )
        )

    with ProgressBar():
        computed_shifts = compute(*shifts, scheduler='threads', num_workers=multiprocessing.cpu_count())

    return np.cumsum(np.stack(computed_shifts), axis=0)



def get_image_shifts(image, drift_correct_channel, upsample_factor=10, space='real', disambiguate=False, overlap_ratio=0.8):
    """
    Register an image stack with the dimensions T, C, Z, Y, X.

    Compute shifts on one channel, then prepend a zero shift for the channel axis.
    Returns a NumPy array of shape (T, 4): [C, Z, Y, X] shifts.
    """
    shifts = get_frame_shifts(image[:, drift_correct_channel, :, :, :],
                              upsample_factor=upsample_factor,
                              space=space,
                              disambiguate=disambiguate,
                              overlap_ratio=overlap_ratio)
    


    return shifts

def register_image(image, drift_correct_channel, upsample_factor=10, space='real', disambiguate=False, overlap_ratio=0.8):
    """
    Register an image stack with the dimensions T, C, Z, Y, X.
    Calculate shifts on one channel, then apply shifts to all channels.
    Apply shifts to the image stack and return the registered image.
    """
    shifts = get_image_shifts(image, drift_correct_channel, upsample_factor=upsample_factor, space=space, disambiguate=disambiguate, overlap_ratio=overlap_ratio)
    
    # Convert image to NumPy (if it's still Dask)
    image_np = image.compute() if isinstance(image, da.Array) else image
    registered_image = np.zeros_like(image_np)

    T, C, Z, Y, X = image_np.shape

    for t in range(T):
        shift_t = shifts[t]  # shape: (4,) -> [C, Z, Y, X]; we skip C (==0)
        for c in range(C):
            registered_image[t, c] = shift(image_np[t, c], shift_t)

    return registered_image, shifts




# Define dimensions
T, C, Z, Y, X = 4, 2, 3, 4, 4

# Create a numpy array filled with zeros (you can also use random values or ones)
image = np.ones((T, C, Z, Y, X), dtype=np.uint16)

# Example: set a specific voxel to a value
image[0, 0, 1, 1, 1] = 200  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[0, 0, 1, 1, 2] = 201  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[0, 0, 1, 2, 1] = 202  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[0, 0, 1, 2, 2] = 203  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5

# Example: set a specific voxel to a value

image[1, 0, 1, 2, 1] = 204  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[1, 0, 1, 2, 2] = 205  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[1, 0, 1, 3, 1] = 206  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[1, 0, 1, 3, 2] = 207  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5

image[2, 0, 1, 1, 1] = 208  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[2, 0, 1, 1, 2] = 209  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[2, 0, 1, 2, 1] = 210  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[2, 0, 1, 2, 2] = 211  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5

image[3, 0, 1, 2, 2] = 212  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[3, 0, 1, 2, 3] = 213  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[3, 0, 1, 3, 2] = 214  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
image[3, 0, 1, 3, 3] = 215  # Set the voxel in timepoint 0, channel 1, z-plane 2, y=5, x=5
# print("frame 0")
# print( image[0])
# print("frame 1")
# print( image[1])

chunk_size = (1, 1, 1, Y, X)  # Adjust chunk size based on your memory limits and preferences

image = da.from_array(image, chunks=chunk_size)
# test registering two frames
# T, C, Z, Y, X

# shift = get_frame_shift(image[0,0,:,:,:], image[1,0,:,:,:])
# print(shift)

# shifts = get_frame_shifts(image[:,0,:,:,:])
# print(shifts)

# shifts = get_image_shifts(image, 0)
# print(shifts)

registered_image, shifts = register_image(image, 0)
print(shifts)